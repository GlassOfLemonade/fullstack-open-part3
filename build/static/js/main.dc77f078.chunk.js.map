{"version":3,"sources":["PersonForm.js","Filter.js","Person.js","services/Phonebook.js","App.js","index.js"],"names":["PersonForm","newName","newPhone","handleNewName","handleNewPhone","handleNewPerson","value","onChange","type","onClick","Filter","filter","handleFilter","Person","person","handleDelete","name","number","baseUrl","Phonebook","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","remove","delete","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewPhone","setFilter","errorMessage","setErrorMessage","setType","useEffect","console","log","InitialData","refreshData","filtered","toLowerCase","includes","event","target","preventDefault","matchFound","find","undefined","newPerson","setTimeout","entry","newPersonObj","window","confirm","catch","error","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc77f078.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = ({newName, newPhone, handleNewName, handleNewPhone, handleNewPerson}) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNewName} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newPhone} onChange={handleNewPhone} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\" onClick={handleNewPerson}>add</button>\r\n            </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = ({filter, handleFilter}) => {\r\n    return (\r\n        <div>\r\n            filter shown with <input value={filter} onChange={handleFilter}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Person = ({person, handleDelete}) => {\r\n\r\n    return (\r\n        <div key={person.name}>{person.name} {person.number} <button onClick={handleDelete}>Delete</button></div>\r\n    )\r\n}\r\n\r\nexport default Person","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => { return response.data })\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst Phonebook = { getAll, create, update, remove }\r\n\r\nexport default Phonebook","import React, { useState, useEffect } from 'react'\nimport PersonForm from './PersonForm'\nimport Filter from './Filter'\nimport Person from './Person'\nimport Phonebook from './services/Phonebook'\n\nconst Notification = ({message, type}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>{message}</div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ type, setType ] = useState('')\n\n  useEffect(() => {\n    console.log('getting phonebook from db...')\n    Phonebook\n      .getAll()\n      .then(InitialData => {\n        console.log('phonebook retrieved! Data:')\n        console.log(InitialData)\n        setPersons(InitialData)\n      })\n  },[])\n  \n  // this is used to refresh data so that the id is in the app state,\n  // in previous implementations when a new entry was added to phonebook\n  // it would be added to the state as well, but it would not have an id\n  // due to id on the db file being generated by json-server. I'd rather\n  // take the perf hit from loading the whole db again than have the id\n  // be missing in state because that can cause all sorts of issues.\n  const refreshData = () => {\n    Phonebook\n      .getAll()\n      .then(data => {\n        setPersons(data)\n      })\n  }\n\n  const handleNewName = (event) => {\n    // console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleNewPhone = (event) => {\n    // console.log(event.target.value)\n    setNewPhone(event.target.value)\n  }\n  const handleFilter = (event) => {\n    // console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const handleDelete = (id) => {\n    setType('notification')\n    setErrorMessage(\n      `Removing ${persons[id-1].name}...`\n    )\n    Phonebook.remove(id).then(response => {\n      setErrorMessage(\n        'Successfully removed!'\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n        setType('')\n      }, 4000)\n      console.log(response)\n      // refresh data\n      refreshData()\n    })\n    .catch(error => {\n      setType('error')\n      setErrorMessage(\n        'Entry has already been removed from the server, please refresh your application!'\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n        setType('')\n      }, 4000)\n    })\n  }\n\n  const handleNewPerson = (event) => {\n    event.preventDefault()\n\n    const matchFound = persons.find(({name}) => name === newName)\n\n    if (matchFound === undefined) {\n      const newPerson = {\n        name: newName,\n        number: newPhone\n      }\n      Phonebook.create(newPerson).then(response => {\n        console.log(response)\n        setType('notification')\n        setErrorMessage(\n          `${newName} added`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n          setType('')\n        }, 4000)\n        //reset form fields\n        setNewName('')\n        setNewPhone('')\n        refreshData()\n      })\n      \n    } else { // existing name found\n      console.log(matchFound)\n      // find the entry in state\n      const person = persons.find(entry => entry.name === newName)\n      const newPersonObj = { ...person, number: newPhone }\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        Phonebook.update(person.id, newPersonObj).then(response => {\n          console.log(response)\n          // refresh data\n          refreshData()\n        })\n        .catch(error => {\n          setType('error')\n          setErrorMessage(\n            'Entry has already been removed from the server, please refresh your application!'\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n            setType('')\n          }, 4000)\n        })\n      }\n    }\n  }\n\n  // rerender by filtering persons array\n  const filtered = (filter === '') ? persons : persons.filter(person => (person.name.toLowerCase().includes(filter) || person.name.includes(filter)))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} type={type}/>\n      <Filter filter={filter} handleFilter={handleFilter} />\n      <h2>Add New</h2>\n      <PersonForm newName={newName} newPhone={newPhone} handleNewName={handleNewName} handleNewPhone={handleNewPhone} handleNewPerson={handleNewPerson} />\n      <h2>Numbers</h2>\n      {filtered.map(person => \n        <Person key={person.id} person={person} handleDelete={() => {\n          if (window.confirm(`Delete ${person.name}?`)) {\n            handleDelete(person.id)\n          }\n        } } /> \n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}